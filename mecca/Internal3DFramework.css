* {
    box-sizing: border-box;
}

html {
    width: 100%;
    height: 100%;
}

body {
    width: 100%;
    height: 100%;
    margin: 0;
    position: relative;
    overflow: hidden;
}

/* The stage. Set the perspective and origin here. */
.canvas {
    width: 100%;
    height: 100%;
    position: absolute;
    perspective: 500px;
    --offsetPerspectiveX: 0px;
    --offsetPerspectiveY: 0px;
    perspective-origin: calc(50% + var(--offsetPerspectiveX)) calc(50% + var(--offsetPerspectiveY));
    transition: perspective-origin 0.25s ease;
}

/* 3D Canvas transform-style */
.canvas * {
    transform-style: preserve-3d;
}

/* Auto center the camera */
.canvas > * {
    position: absolute;
    top: 50%;
    left: 50%;
}

/* Apply camera rotation here. */
.globalCamera {

}

/* Framework internals and test */
@keyframes _rotateTest {
    0% {
        transform: rotateX(0deg);
    }

    100% {
        transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
    }
}

@keyframes _rotateYTest {
    0% {
        transform: rotateY(0deg);
    }

    100% {
        transform: rotateY(360deg);
    }
}

@keyframes _rotateZTest {
    0% {
        transform: rotateZ(0deg);
    }

    100% {
        transform: rotateZ(360deg);
    }
}

@keyframes _rotateXTest {
    0% {
        transform: rotateX(0deg);
    }

    100% {
        transform: rotateX(360deg);
    }
}

.reusableBox {
    --width: 10px;
    --length: 10px;
    --height: 10px;
}

._reusableBox__boxFace {
    position: absolute;
}


._reusableBox__boxFront, ._reusableBox__boxBack {
    width: var(--length);
    height: var(--height);
    left: calc(var(--length) / -2);
    top: calc(var(--height) / -2);
}

._reusableBox__boxLeft, ._reusableBox__boxRight {
    width: var(--width);
    height: var(--height);
    left: calc(var(--width) / -2);
    top: calc(var(--height) / -2);
}

._reusableBox__boxBottom, ._reusableBox__boxTop {
    width: var(--length);
    height: var(--width);
    left: calc(var(--length) / -2);
    top: calc(var(--width) / -2);
}

._reusableBox__boxFront {
    transform: rotateY(0deg) translateZ(calc(var(--width) / 2));
}

._reusableBox__boxBack {
    transform: rotateY(180deg) translateZ(calc(var(--width) / 2));
}

._reusableBox__boxLeft {
    transform: rotateY(-90deg) translateZ(calc(var(--length) / 2));
}

._reusableBox__boxRight {
    transform: rotateY(90deg) translateZ(calc(var(--length) / 2));
}

._reusableBox__boxTop {
    transform: rotateX(90deg) translateZ(calc(var(--height) / 2));
}

._reusableBox__boxBottom {
    transform: rotateX(-90deg) translateZ(calc(var(--height) / 2));
}

._test ._reusableBox__boxFront {
    background: rgba(255, 0, 0, 0.5);
}

._test ._reusableBox__boxBack {
    background: rgba(0, 128, 255, 0.5);
}

._test ._reusableBox__boxLeft {
    background: rgba(0, 255, 34, 0.5);
}

._test ._reusableBox__boxRight {
    background: rgba(221, 0, 255, 0.5);
}

._test ._reusableBox__boxBottom {
    background: rgba(230, 255, 0, 0.5);
}

._test ._reusableBox__boxTop {
    background: rgba(230, 255, 0, 0.5);
}
